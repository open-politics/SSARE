services:

  app:
    build: 
      context: .
      dockerfile: ./services/app/Dockerfile
    ports:
      - "${CORE_APP_PORT}:8089"
    volumes:
      - ./.store/backups:/app/backups
    env_file:
      - .env.local
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
    depends_on:
      - service-scraper
      - service-postgres
    networks:
      - opol-app-stack
      - default
  
  database-articles:
    image: pgvector/pgvector:pg16
    restart: always
    environment:
      - POSTGRES_USER=${ARTICLES_DB_USER}
      - POSTGRES_PASSWORD=${ARTICLES_DB_PASSWORD}
      - POSTGRES_DB=${ARTICLES_DB_NAME}
      - POSTGRES_CONFIG_FILE=/etc/postgresql.conf
    volumes:
      - ./core/configs/postgres/postgres.conf:/etc/postgresql.conf
      - ./.store/data/articles_db_data:/var/lib/postgresql/data
    command: -c shared_preload_libraries='pg_stat_statements' -c pg_stat_statements.max=10000 -c pg_stat_statements.track=all
    ports:
      - "${ARTICLES_DB_PORT}:5432"
    networks:
      - opol-app-stack
      - default

  embeddings-service:
    build: 
      context: .
      dockerfile: ./services/service-embeddings/Dockerfile
    restart: always
    ports:
      - "${EMBEDDING_SERVICE_PORT}:0420"
    depends_on:
      - service-postgres
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
    env_file:
      - .env.local
    networks:
      - opol-app-stack
      - default

  service-entities:
    build: 
      context: .
      dockerfile: ./services/service-entities/Dockerfile
    restart: always
    ports:
      - "${ENTITY_SERVICE_PORT}:1290"
    depends_on:
      - service-postgres
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
    networks:
      - opol-app-stack
      - default

  service-geo:
    build:
      context: .
      dockerfile: ./services/service-geo/Dockerfile
    restart: no
    networks:
      - opol-app-stack
      - default
    ports:
      - "${GEO_SERVICE_PORT}:3690"
    expose:
      - "3690"
    env_file:
      - .env.local
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api

  pelias-placeholder:
    image: pelias/placeholder
    restart: always
    command: >
      sh -c '
        if [ ! -s /data/placeholder/store.sqlite3 ]; then
          echo "Placeholder data not found or empty. Downloading..."
          rm -f /data/placeholder/store.sqlite3
          mkdir -p /data/placeholder
          wget -O /data/placeholder/store.sqlite3.gz https://data.geocode.earth/placeholder/store.sqlite3.gz
          gunzip /data/placeholder/store.sqlite3.gz
        else
          echo "Placeholder data found."
        fi
        ls -l /data/placeholder
        ./cmd/server.sh
      '
    environment:
      - PORT=${PELIAS_PLACEHOLDER_PORT}
      - WORKERS=8
    ports:
      - "${PELIAS_PLACEHOLDER_PORT}:${PELIAS_PLACEHOLDER_PORT}"
    volumes:
      - .store/data/placeholder:/data/placeholder
    networks:
      - opol-app-stack
      - default

  service-postgres:
    build: 
      context: .
      dockerfile: ./services/service-postgres/Dockerfile
    volumes:
      - ./services/service-postgres/alembic/versions:/app/alembic/versions
      - ./.store/credentials/service-postgres-key.json:/app/credentials/service-postgres-key.json
      - cloudsql:/cloudsql
      - ./.store/backups:/app/backups
    env_file:
      - .env.local
    ports:
      - "${POSTGRES_SERVICE_PORT}:5434"
    networks:
      - opol-app-stack
      - default

  # ray_head:
  #   build: 
  #     context: ./opol
  #     dockerfile: ./images/RayBase.Dockerfile
  #   command: >
  #     sh -c "ray start --head --port=6380 --dashboard-host=0.0.0.0 --block"
  #   ports:
  #     - "6380:6380"
  #     - "8265:8265"
  #     - "10001:10001"
  #   env_file:
  #     - .env.local
  #   networks:
  #     - default
  #     - opol-network
  #   environment:
  #     - RAY_HEAD_SERVICE_HOST=ray_head
  #     - RAY_HEAD_SERVICE_PORT=6380
  #     - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
  #   shm_size: 8gb

  # ray_worker:
  #   build: 
  #     context: ./opol
  #     dockerfile: ./images/RayBase.Dockerfile
  #   command: >
  #     sh -c "ray start --address=ray_head:6380 --block"
  #   networks:
  #     - default
  #     - opol-network
  #   depends_on:
  #     - ray_head
  #   shm_size: 8gb

  redis:
    image: redis:latest
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./core/configs/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./.store/data/redis:/data
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - opol-app-stack
      - default

  service-scraper:
    build: 
      context: .
      dockerfile: ./services/service-scraper/Dockerfile
    ports:
      - "${SCRAPER_SERVICE_PORT}:8081"
    environment:
      - PREFECT_API_URL=https://api.prefect.cloud/api/accounts/bb0713a4-8ee0-466d-a215-02f392396cb8/workspaces/befbba42-c4cb-4bce-b539-ab6bb67a99c0
      - PREFECT_API_KEY=${PREFECT_API_KEY}
    networks:
      - opol-app-stack
      - default

  searxng:
    image: searxng/searxng
    ports:
      - '${SEARXNG_PORT:-8021}:8080'
    networks:
      - default
      - opol-app-stack
    env_file:
      - .env.local
    volumes:
      - ./core/configs/searxng/searxng-limiter.toml:/etc/searxng/limiter.toml
      - ./core/configs/searxng/searxng-settings.yml:/etc/searxng/settings.yml
      - ./.store/data/searxng:/data

  worker-base:
    image: openpoliticsproject/worker-base:latest
    command: ["prefect", "worker", "start", "--pool", "docker-pool"]
    env_file:
      - .env.local
    build:
      context: flows
      dockerfile: Dockerfile
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - default
      - opol-app-stack
    environment:
      - HATCHET_CLIENT_TOKEN=${HATCHET_CLIENT_TOKEN}

volumes:
  articles_db_data:
  cloudsql:
  prefect_data:
  r2r_db_data:

networks:
  default:
    external: false
  opol-app-stack:
    driver: bridge
    external: true


prefect_database:
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_USER=${PREFECT_DB_USER}
      - POSTGRES_PASSWORD=${PREFECT_DB_PASSWORD}
      - POSTGRES_DB=${PREFECT_DB_NAME}
    volumes:
      - ./.store/data/prefect_db_data:/var/lib/postgresql/data
    ports:
      - "${PREFECT_DB_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PREFECT_DB_USER} -d ${PREFECT_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default
  

 prefect_server:
    image: prefecthq/prefect:3.1.2.dev1-python3.11-conda
    restart: always
    volumes:
      - ./data/prefect_data:/root/.prefect
    command: >
      sh -c "pip install --upgrade setuptools && prefect server start"
    environment:
      - PREFECT_UI_URL=http://0.0.0.0:${PREFECT_SERVER_PORT}
      - PREFECT_API_URL=http://0.0.0.0:${PREFECT_SERVER_PORT}/api
      - PREFECT_SERVER_API_HOST=0.0.0.0
    ports:
      - "${PREFECT_SERVER_PORT}:${PREFECT_SERVER_PORT}"
    networks:
      - default
      - opol-network

 prefect_worker:
    image: prefecthq/prefect:3.1-python3.10-conda
    restart: on-failure:5
    command: >
      sh -c "pip install --upgrade setuptools && prefect work-pool create --type docker my-docker-pool"
    depends_on:
      - prefect_server
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
    networks:
      - default
      - opol-network