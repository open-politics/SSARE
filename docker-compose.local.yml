services:

  # articles_database:
  #   image: pgvector/pgvector:pg16
  #   restart: always
  #   environment:
  #     - POSTGRES_USER=${ARTICLES_DB_USER}
  #     - POSTGRES_PASSWORD=${ARTICLES_DB_PASSWORD}
  #     - POSTGRES_DB=${ARTICLES_DB_NAME}
  #     - POSTGRES_CONFIG_FILE=/etc/postgresql.conf
  #   volumes:
  #     - ./SSARE/articles_db/postgres.conf:/etc/postgresql.conf
  #     - ./data/articles_db_data:/var/lib/postgresql/data
  #   command: -c shared_preload_libraries='pg_stat_statements' -c pg_stat_statements.max=10000 -c pg_stat_statements.track=all
  #   ports:
  #     - "${ARTICLES_DB_PORT}:5473"
  #   networks:
  #     - default
  #     - ssare-network

  classification_service:
    build: 
      context: ./SSARE
      dockerfile: ./classification_service/Dockerfile
    ports:
      - "${CLASSIFICATION_SERVICE_PORT}:5688"
    environment:
      - LOCAL_LLM=${LOCAL_LLM}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
    networks:
      - default
      - ssare-network

  embedding_flow:
    build: 
      context: ./SSARE
      dockerfile: ./embedding_service/Dockerfile
      target: flow
    restart: always
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
    env_file:
      - .env
    networks:
      - default
      - ssare-network

  embedding_service:
    build: 
      context: ./SSARE
      dockerfile: ./embedding_service/Dockerfile
      target: api
    restart: always
    ports:
      - "${EMBEDDING_SERVICE_PORT}:0420"
    depends_on:
      - postgres_service
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
    env_file:
      - .env
    networks:
      - default
      - ssare-network

  entity_service:
    build: 
      context: ./SSARE
      dockerfile: ./entity_service/Dockerfile
    restart: always
    ports:
      - "${ENTITY_SERVICE_PORT}:1290"
    depends_on:
      - postgres_service
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
    networks:
      - default
      - ssare-network

  geo_service:
    build: 
      context: ./SSARE
      dockerfile: ./geo_service/Dockerfile
    restart: always
    networks:
      - default
      - ssare-network
    ports:
      - "${GEO_SERVICE_PORT}:3690"
    expose:
      - "3690"
    env_file:
      - .env
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api

  litellm:
    image: ghcr.io/berriai/litellm:main-latest
    volumes:
      - ./SSARE/litellm/config.yaml:/app/config.yaml
    ports:
      - "4000:4000"
    command: >
      --config '/app/config.yaml' --debug --host 0.0.0.0 --port 4000 --num_workers 8
    networks:
      - default
      - ssare-network

  main_core_app:
    build: 
      context: ./SSARE
      dockerfile: ./app/Dockerfile
    ports:
      - "${MAIN_CORE_APP_PORT}:8089"
    volumes:
      - ./backups:/app/backups
    env_file:
      - .env
    depends_on:
      - scraper_service
      - postgres_service
    networks:
      - default
      - ssare-network

  # neo4j:
  #   image: neo4j:latest
  #   ports:
  #     - "${NEO4J_HTTP_PORT}:7474"
  #     - "${NEO4J_BOLT_PORT}:7687"
  #   environment:
  #     - NEO4J_AUTH=neo4j/'king kong'
  #     - NEO4J_apoc_export_file_enabled=true
  #     - NEO4J_apoc_import_file_enabled=true
  #     - NEO4J_apoc_import_file_use__neo4j__config=true
  #     - NEO4J_PLUGINS=["apoc", "graph-data-science"]
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #   volumes:
  #     - neo4j_data:/data
  #     - neo4j_logs:/logs
  #     - neo4j_import:/var/lib/neo4j/import
  #     - neo4j_plugins:/plugins
  #   networks:
  #     - default
  #     - ssare-network

  ollama:
    build: 
      context: ./SSARE
      dockerfile: ./ollama/Dockerfile
    pull_policy: always
    deploy:
      resources:
        reservations:
         devices:
           - driver: nvidia
             capabilities: ["gpu"]
             count: all
    ports:
      - "11434:11434"
    volumes:
      - ./data/ollama:/root/.ollama
    networks:
      - default
      - ssare-network

  pelias_placeholder:
    image: pelias/placeholder
    restart: always
    command: >
      sh -c '
        if [ ! -s /data/placeholder/store.sqlite3 ]; then
          echo "Placeholder data not found or empty. Downloading..."
          rm -f /data/placeholder/store.sqlite3
          mkdir -p /data/placeholder
          wget -O /data/placeholder/store.sqlite3.gz https://data.geocode.earth/placeholder/store.sqlite3.gz
          gunzip /data/placeholder/store.sqlite3.gz
        else
          echo "Placeholder data found."
        fi
        ls -l /data/placeholder
        ./cmd/server.sh
      '
    environment:
      - PORT=${PELIAS_PLACEHOLDER_PORT}
      - WORKERS=8
    ports:
      - "${PELIAS_PLACEHOLDER_PORT}:${PELIAS_PLACEHOLDER_PORT}"
    volumes:
      - ./data/placeholder:/data/placeholder
    networks:
      - default
      - ssare-network

  postgres_service:
    build: 
      context: ./SSARE
      dockerfile: ./postgres_service/Dockerfile
    volumes:
      - ./SSARE/postgres_service/alembic/versions:/app/alembic/versions
      - ./credentials/postgres-service-key.json:/app/credentials/postgres-service-key.json
      - cloudsql:/cloudsql
      - ./backups:/app/backups
    env_file:
      - .env
    ports:
      - "${POSTGRES_SERVICE_PORT}:5434"
    networks:
      - default
      - ssare-network
    
  cloud-sql-proxy:
    image: gcr.io/cloud-sql-connectors/cloud-sql-proxy
    command:
      - "--credentials-file=/credentials/postgres-service-key.json"
      - "${CLOUD_SQL_CONNECTION_NAME}"
    volumes:
      - ./credentials/postgres-service-key.json:/credentials/postgres-service-key.json:ro
      - cloudsql:/cloudsql

  # prefect_worker:
  #   image: prefecthq/prefect:3.1-python3.10-conda
  #   restart: on-failure:5
  #   command: >
  #     sh -c "pip install --upgrade setuptools && prefect work-pool create --type docker my-docker-pool"
  #   depends_on:
  #     - prefect_server
  #   environment:
  #     - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
  #   networks:
  #     - default
  #     - ssare-network

  # prefect_cli:
  #   image: prefecthq/prefect:3.1-python3.10-conda
  #   restart: no
  #   command: >
  #     sh -c "pip install --upgrade setuptools"
  #   environment:
  #     - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
  #   depends_on:
  #     - prefect_server
  #     - prefect_worker

  prefect_database:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_USER=${PREFECT_DB_USER}
      - POSTGRES_PASSWORD=${PREFECT_DB_PASSWORD}
      - POSTGRES_DB=${PREFECT_DB_NAME}
    volumes:
      - ./data/prefect_db_data:/var/lib/postgresql/data
    ports:
      - "${PREFECT_DB_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PREFECT_DB_USER} -d ${PREFECT_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default
      - ssare-network

  prefect_server:
    image: prefecthq/prefect:3.1.2.dev1-python3.11-conda
    restart: always
    volumes:
      - ./data/prefect_data:/root/.prefect
    command: >
      sh -c "pip install --upgrade setuptools && prefect server start"
    environment:
      - PREFECT_UI_URL=http://0.0.0.0:${PREFECT_SERVER_PORT}
      - PREFECT_API_URL=http://0.0.0.0:${PREFECT_SERVER_PORT}/api
      - PREFECT_SERVER_API_HOST=0.0.0.0
    ports:
      - "${PREFECT_SERVER_PORT}:${PREFECT_SERVER_PORT}"
    networks:
      - default
      - ssare-network

  # r2r:
  #   build: 
  #     context: ./SSARE
  #     dockerfile: ./r2r_server/Dockerfile
  #   ports:
  #     - "${R2R_PORT}:8000"
  #   environment:
  #     - POSTGRES_USER=${R2R_DB_USER}
  #     - POSTGRES_PASSWORD=${R2R_DB_PASSWORD}
  #     - POSTGRES_HOST=r2r_database
  #     - POSTGRES_PORT=5432
  #     - POSTGRES_DBNAME=${R2R_DB_NAME}
  #     - POSTGRES_VECS_COLLECTION=r2r_vecs_3
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - CONFIG_OPTION=${CONFIG_OPTION:-default}
  #     - HATCHET_CLIENT_TOKEN=${HATCHET_CLIENT_TOKEN}
  #   depends_on:
  #     - r2r_database
  #   networks:
  #     - default
  #     - ssare-network

  # r2r_database:
  #   image: pgvector/pgvector:pg16
  #   restart: always
  #   environment:
  #     - POSTGRES_USER=${R2R_DB_USER}
  #     - POSTGRES_PASSWORD=${R2R_DB_PASSWORD}
  #     - POSTGRES_DB=${R2R_DB_NAME}
  #   volumes:
  #     - r2r_db_data:/var/lib/postgresql/data
  #   ports:
  #     - "${R2R_DB_PORT}:5432"
  #   networks:
  #     - default
  #     - ssare-network

  # rag_service:
  #   build: 
  #     context: ./SSARE
  #     dockerfile: ./rag_service/Dockerfile
  #   restart: no
  #   ports:
  #     - "${RAG_SERVICE_PORT}:4312"
  #   depends_on:
  #     - redis
  #     - r2r_database
  #   networks:
  #     - default
  #     - ssare-network
  #   environment:
  #     - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
  #     - POSTGRES_HOST=r2r_database
  #     - POSTGRES_USER=${R2R_DB_USER}
  #     - POSTGRES_PASSWORD=${R2R_DB_PASSWORD}
  #     - POSTGRES_DBNAME=${R2R_DB_NAME}
  #     - POSTGRES_PORT=5432
  #     - POSTGRES_VECS_COLLECTION=ssare-vec
  #     - INIT_DB=true
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - R2R_SERVER_URL=http://r2r:${R2R_PORT}
  #     - HATCHET_CLIENT_TOKEN=${HATCHET_CLIENT_TOKEN}
  #   env_file:
  #     - .env

  ray_head:
    build: 
      context: ./SSARE
      dockerfile: ./images/RayBase.Dockerfile
    command: >
      sh -c "ray start --head --port=6380 --dashboard-host=0.0.0.0 --block"
    ports:
      - "6380:6380"
      - "8265:8265"
      - "10001:10001"
    env_file:
      - .env
    networks:
      - default
      - ssare-network
    environment:
      - RAY_HEAD_SERVICE_HOST=ray_head
      - RAY_HEAD_SERVICE_PORT=6380
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
    shm_size: 8gb

  
  ray_worker:
    build: 
      context: ./SSARE
      dockerfile: ./images/RayBase.Dockerfile
    command: >
      sh -c "ray start --address=ray_head:6380 --block"
    networks:
      - default
      - ssare-network
    depends_on:
      - ray_head
    shm_size: 8gb
  


  redis:
    image: redis:latest
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./SSARE/core/configs/redis.conf:/usr/local/etc/redis/redis.conf
      - ./data/redis:/data
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - default
      - ssare-network

  # reranker_service:
  #   build: 
  #     context: ./SSARE
  #     dockerfile: ./reranker_service/Dockerfile
  #   ports:
  #     - "${RERANKER_SERVICE_PORT}:6930"
  #   environment:
  #     - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
  #   networks:
  #     - default
  #     - ssare-network

  scraper_service:
    build: 
      context: ./SSARE
      dockerfile: ./scraper_service/Dockerfile
    ports:
      - "${SCRAPER_SERVICE_PORT}:8081"
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
    networks:
      - default
      - ssare-network

  # semantic_router:
  #   build: 
  #     context: ./SSARE
  #     dockerfile: ./semantic_router/Dockerfile
  #   ports:
  #     - "${SEMANTIC_ROUTER_PORT}:${SEMANTIC_ROUTER_PORT}"
  #   networks:
  #     - default
  #     - ssare-network

volumes:
  articles_db_data:
  cloudsql:
  prefect_db_data:
  prefect_data:
  r2r_db_data:

networks:
  default:
    driver: bridge
  ssare-network:
    external: true