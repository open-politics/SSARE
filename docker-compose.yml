services:
  entity_service:
    build: 
      context: ./SSARE
      dockerfile: ./entity_service/Dockerfile
    restart: always
    ports:
      - "${ENTITY_SERVICE_PORT}:1290"
    networks:
      - app_network
    depends_on:
      - redis
      - postgres_service
    environment:
      - PREFECT_API_URL=http://prefect_server:4200/api
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  geo_service:
    build: 
      context: ./SSARE
      dockerfile: ./geo_service/Dockerfile
    restart: always
    ports:
      - "${GEO_SERVICE_PORT}:3690"
    expose:
      - "3690"
    networks:
      - app_network
      - default
    depends_on:
      - redis
      - postgres_service
      - pelias_placeholder
    environment:
      - PREFECT_API_URL=http://prefect_server:4200/api
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app_network

  main_core_app:
    build: 
      context: ./SSARE
      dockerfile: ./app/Dockerfile
    ports:
      - "${MAIN_CORE_APP_PORT}:8089"
    # volumes:
    #   - ./SSARE/app:/app
    networks:
      - app_network
    depends_on:
      - scraper_service
      - postgres_service
      - redis
      - prefect_server

  neo4j:
    container_name: neo4j
    image: neo4j:latest
    ports:
      - "${NEO4J_HTTP_PORT}:7474"
      - "${NEO4J_BOLT_PORT}:7687"
    environment:
      - NEO4J_AUTH=neo4j/'king kong'
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=prefect
    volumes:
      - ./data/neo4j_db/data:/data
      - ./data/neo4j_db/logs:/logs
      - ./data/neo4j_db/import:/var/lib/neo4j/import
      - ./data/neo4j_db/plugins:/plugins
    networks:
      - app_network
      - default

  nlp_service:
    build: 
      context: ./SSARE
      dockerfile: ./nlp_service/Dockerfile
    restart: always
    ports:
      - "${NLP_SERVICE_PORT}:0420"
    networks:
      - app_network
    depends_on:
      - redis
      - postgres_service
    environment:
      - PREFECT_API_URL=http://prefect_server:4200/api
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  pelias_placeholder:
    image: pelias/placeholder
    container_name: pelias_placeholder
    command: "./cmd/server.sh"
    environment:
      - PORT=3999
    ports:
      - "${PELIAS_PLACEHOLDER_PORT}:3999"
    volumes:
      - ./data/placeholder:/data/placeholder  # Adjust this path as necessary
    networks:
      - app_network

  # For temporary r2r testing
  postgres_database:
    image: pgvector/pgvector:pg16
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=prefect
    volumes:
      - ./data/prefect_db/data:/var/lib/postgresql/data
    networks:
      - app_network
    ports:
      - "${POSTGRES_DATABASE_PORT}:5432"

  postgres_db:
    build: 
      context: ./SSARE
      dockerfile: ./postgres_db/Dockerfile
    restart: always
    environment:
      POSTGRES_DB: ssare_db
      POSTGRES_USER: hello
      POSTGRES_PASSWORD: world
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_DB_PORT}:5432"
    networks:
      - app_network

  postgres_service:
    build: 
      context: ./SSARE
      dockerfile: ./postgres_service/Dockerfile
    ports:
      - "${POSTGRES_SERVICE_PORT}:5434"
    networks:
      - app_network
    depends_on:
      - postgres_db

  prefect_agent:
    image: prefecthq/prefect:2.16-python3.11-conda
    restart: always
    command: prefect worker start -p default
    environment:
      - PREFECT_API_URL=http://prefect_server:4200/api
    networks:
      - app_network
    depends_on:
      - prefect_server
      - scraper_service

  prefect_cli:
    image: prefecthq/prefect:2.16-python3.11-conda
    environment:
      - PREFECT_API_URL=http://prefect_server:4200/api
    networks:
      - app_network
    depends_on:
      - prefect_server
      - prefect_agent

  prefect_server:
    image: prefecthq/prefect:2.16-python3.11-conda
    restart: always
    volumes:
      - prefect:/root/.prefect
    entrypoint: ["/opt/prefect/entrypoint.sh", "prefect", "server", "start"]
    environment:
      - PREFECT_UI_URL=http://localhost:4200
      - PREFECT_API_URL=http://localhost:4200
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://postgres:postgres@postgres_database:5433/prefect
      - PREFECT_UI_API_URL=http://localhost:4200/api
    ports:
      - "${PREFECT_SERVER_PORT}:4200"
    depends_on:
      - postgres_database
    networks:
      - app_network

  qdrant_service:
    build: 
      context: ./SSARE
      dockerfile: ./qdrant_service/Dockerfile
    ports:
      - "${QDRANT_SERVICE_PORT}:6969"
    networks:
      - app_network

  qdrant_storage:
    image: qdrant/qdrant:latest
    ports:
      - "${QDRANT_STORAGE_PORT}:6333"
    volumes:
      - ./qdrant_service/qdrant_storage:/qdrant/data
    networks:
      - app_network

  r2r_server:
    image: emrgntcmplxty/r2r:main
    ports:
      - "${R2R_SERVER_PORT}:4343"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres_database
      - POSTGRES_PORT=5432
      - POSTGRES_DBNAME=prefect
      - POSTGRES_VECS_COLLECTION=r2r_vecs
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - postgres_database
    networks:
      - app_network

  rag_service:
    build: 
      context: ./SSARE
      dockerfile: ./rag_service/Dockerfile
    restart: always
    ports:
      - "${RAG_SERVICE_PORT}:4312"
    networks:
      - app_network
    depends_on:
      - redis
      - postgres_service
    environment:
      - PREFECT_API_URL=http://prefect_server:4200/api
      - POSTGRES_HOST=postgres_database
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DBNAME=prefect
      - POSTGRES_PORT=5432
      - POSTGRES_VECS_COLLECTION=ssare_vec
      - OPENAI_API_KEY
      - R2R_SERVER_URL=http://r2r_server:4343
    env_file:
      - .env

  redis:
    image: redis:latest
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./core/configs/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - app_network

  scraper_service:
    build: 
      context: ./SSARE
      dockerfile: ./scraper_service/Dockerfile
    ports:
      - "${SCRAPER_SERVICE_PORT}:8081"
    networks:
      - app_network
    depends_on:
      - redis

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    networks:
      - app_network

networks:
  app_network:
    external: true
  default:
    external: false

volumes:
  postgres_data:
  prefect:
  prefect_db:
