services:

  articles_database:
    image: pgvector/pgvector:pg16
    restart: always
    environment:
      - POSTGRES_USER=${ARTICLES_DB_USER}
      - POSTGRES_PASSWORD=${ARTICLES_DB_PASSWORD}
      - POSTGRES_DB=${ARTICLES_DB_NAME}
    volumes:
      - articles_db_data:/var/lib/postgresql/data
    ports:
      - "${ARTICLES_DB_PORT}:5432"

  entity_service:
    build: 
      context: ./SSARE
      dockerfile: ./entity_service/Dockerfile
    restart: always
    ports:
      - "${ENTITY_SERVICE_PORT}:1290"
    depends_on:
      - redis
      - postgres_service
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api

  geo_service:
    build: 
      context: ./SSARE
      dockerfile: ./geo_service/Dockerfile
    restart: always
    ports:
      - "${GEO_SERVICE_PORT}:3690"
    expose:
      - "3690"
    depends_on:
      - redis
      - postgres_service
      - pelias_placeholder
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api

  main_core_app:
    build: 
      context: ./SSARE
      dockerfile: ./app/Dockerfile
    ports:
      - "${MAIN_CORE_APP_PORT}:8089"
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
      - R2R_API_URL=http://r2r:${R2R_PORT}
    depends_on:
      - scraper_service
      - postgres_service
      - redis

  neo4j:
    image: neo4j:latest
    ports:
      - "${NEO4J_HTTP_PORT}:7474"
      - "${NEO4J_BOLT_PORT}:7687"
    environment:
      - NEO4J_AUTH=neo4j/'king kong'
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins

  embedding_service:
    build: 
      context: ./SSARE
      dockerfile: ./embedding_service/Dockerfile
    restart: always
    ports:
      - "${EMBEDDING_SERVICE_PORT}:0420"
    depends_on:
      - redis
      - postgres_service
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api

  litellm:
    image: ghcr.io/berriai/litellm:main-latest
    volumes:
      - ./SSARE/litellm/config.yaml:/app/config.yaml
    ports:
      - "4000:4000"
    networks:
      - default
    command: >
      --config '/app/config.yaml' --debug --host 0.0.0.0 --port 4000 --num_workers 8

    
  ollama:
    build: 
      context: ./SSARE
      dockerfile: ./ollama/Dockerfile
    pull_policy: always
    deploy:
      resources:
        reservations:
         devices:
           - driver: nvidia
             capabilities: ["gpu"]
             count: all
    ports:
      - "11434:11434"
    volumes:
      - ./ollama:/root/.ollama

  pelias_placeholder:
    image: pelias/placeholder
    command: >
      sh -c '
        if [ ! -s /data/placeholder/store.sqlite3 ]; then
          echo "Placeholder data not found or empty. Downloading..."
          rm -f /data/placeholder/store.sqlite3
          mkdir -p /data/placeholder
          wget -O /data/placeholder/store.sqlite3.gz https://data.geocode.earth/placeholder/store.sqlite3.gz
          gunzip /data/placeholder/store.sqlite3.gz
        else
          echo "Placeholder data found."
        fi
        ls -l /data/placeholder
        ./cmd/server.sh
      '
    environment:
      - PORT=${PELIAS_PLACEHOLDER_PORT}
    ports:
      - "${PELIAS_PLACEHOLDER_PORT}:${PELIAS_PLACEHOLDER_PORT}"
    volumes:
      - ./data/placeholder:/data/placeholder

  postgres_service:
    build: 
      context: ./SSARE
      dockerfile: ./postgres_service/Dockerfile
    ports:
      - "${POSTGRES_SERVICE_PORT}:5434"
    depends_on:
      - articles_database

  prefect_agent:
    image: prefecthq/prefect:2.16-python3.11-conda
    restart: always
    command: prefect worker start -p default
    environment:
      - PREFECT_API_URL=http://prefect_server:4200/api

  prefect_cli:
    image: prefecthq/prefect:2.16-python3.11-conda
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
    depends_on:
      - prefect_server
      - prefect_agent

  prefect_database:
    image: pgvector/pgvector:pg16
    restart: always
    environment:
      - POSTGRES_USER=${PREFECT_DB_USER}
      - POSTGRES_PASSWORD=${PREFECT_DB_PASSWORD}
      - POSTGRES_DB=${PREFECT_DB_NAME}
    volumes:
      - ./SSARE/app:/app
      - prefect_db_data:/var/lib/postgresql/data
    ports:
      - "${PREFECT_DB_PORT}:5432"

  prefect_server:
    image: prefecthq/prefect:2.16-python3.11-conda
    restart: always
    volumes:
      - prefect_data:/root/.prefect
    entrypoint: ["/opt/prefect/entrypoint.sh", "prefect", "server", "start"]
    environment:
      - PREFECT_UI_URL=http://0.0.0.0:${PREFECT_SERVER_PORT}
      - PREFECT_API_URL=http://0.0.0.0:${PREFECT_SERVER_PORT}/api
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://${PREFECT_DB_USER}:${PREFECT_DB_PASSWORD}@prefect_database:5432/${PREFECT_DB_NAME}
    ports:
      - "${PREFECT_SERVER_PORT}:4200"
    depends_on:
      - prefect_database

  r2r:
    build: 
      context: ./SSARE
      dockerfile: ./r2r_server/Dockerfile
    ports:
      - "${R2R_PORT}:8000"
    environment:
      - POSTGRES_USER=${R2R_DB_USER}
      - POSTGRES_PASSWORD=${R2R_DB_PASSWORD}
      - POSTGRES_HOST=r2r_database
      - POSTGRES_PORT=5432
      - POSTGRES_DBNAME=${R2R_DB_NAME}
      - POSTGRES_VECS_COLLECTION=r2r_vecs_3
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CONFIG_OPTION=${CONFIG_OPTION:-default}
    depends_on:
      - r2r_database

  r2r_database:
    image: pgvector/pgvector:pg16
    restart: always
    environment:
      - POSTGRES_USER=${R2R_DB_USER}
      - POSTGRES_PASSWORD=${R2R_DB_PASSWORD}
      - POSTGRES_DB=${R2R_DB_NAME}
    volumes:
      - r2r_db_data:/var/lib/postgresql/data
    ports:
      - "${R2R_DB_PORT}:5432"
      
  rag_service:
    build: 
      context: ./SSARE
      dockerfile: ./rag_service/Dockerfile
    restart: always
    ports:
      - "${RAG_SERVICE_PORT}:4312"
    depends_on:
      - redis
      - r2r_database
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
      - POSTGRES_HOST=r2r_database
      - POSTGRES_USER=${R2R_DB_USER}
      - POSTGRES_PASSWORD=${R2R_DB_PASSWORD}
      - POSTGRES_DBNAME=${R2R_DB_NAME}
      - POSTGRES_PORT=5432
      - POSTGRES_VECS_COLLECTION=ssare_vec
      - INIT_DB=true
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - R2R_SERVER_URL=http://r2r:${R2R_PORT}
    env_file:
      - .env

  redis:
    image: redis:latest
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./core/configs/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT}:6379"
  
  semantic_router:
    build: 
      context: ./SSARE
      dockerfile: ./semantic_router/Dockerfile
    ports:
      - "${SEMANTIC_ROUTER_PORT}:5689"

  scraper_service:
    build: 
      context: ./SSARE
      dockerfile: ./scraper_service/Dockerfile
    ports:
      - "${SCRAPER_SERVICE_PORT}:8081"
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
    depends_on:
      - redis

networks:
  default:
    external: false

volumes:
  articles_db_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  prefect_db_data:
  prefect_data:
  r2r_db_data: