version: '3'

services:
  traefik:
    image: traefik:v2.5
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=engage@open-politics.org"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      # - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - opol_network

  main_core_app:
    build: 
      context: ./opol
      dockerfile: ./app/Dockerfile
    networks:
      - opol_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.main-core-app.rule=Host(`opol-api.open-politics.org`)"
      - "traefik.http.routers.main-core-app.entrypoints=websecure"
      - "traefik.http.routers.main-core-app.tls=true"
      - "traefik.http.routers.main-core-app.tls.certresolver=myresolver"
      - "traefik.http.middlewares.cors-main.headers.accesscontrolalloworiginlist=https://open-politics.org"
      - "traefik.http.middlewares.cors-main.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.cors-main.headers.accesscontrolallowheaders=Content-Type,Authorization"
      - "traefik.http.middlewares.cors-main.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.cors-main.headers.addvaryheader=true"
      - "traefik.http.routers.main-core-app.middlewares=cors-main@docker"
      - "traefik.http.services.main-core-app.loadbalancer.server.port=8089"
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
      - R2R_API_URL=http://r2r:${R2R_PORT}
    depends_on:
      - scraper_service
      - postgres_service
      - redis

  geo_service:
    build: 
      context: ./opol
      dockerfile: ./geo_service/Dockerfile
    networks:
      - opol_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.geo-service.rule=Host(`geo.opol-api.open-politics.org`)"
      - "traefik.http.routers.geo-service.entrypoints=web"
      - "traefik.http.routers.geo-service.tls=true"
      - "traefik.http.routers.geo-service.tls.certresolver=myresolver"
      - "traefik.http.middlewares.cors-geo.headers.accesscontrolalloworiginlist=https://open-politics.org"
      - "traefik.http.middlewares.cors-geo.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.cors-geo.headers.accesscontrolallowheaders=Content-Type,Authorization"
      - "traefik.http.middlewares.cors-geo.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.cors-geo.headers.addvaryheader=true"
      - "traefik.http.routers.geo-service.middlewares=cors-geo@docker"
      - "traefik.http.services.geo-service.loadbalancer.server.port=3690"
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
    depends_on:
      - redis
      - postgres_service
      - pelias_placeholder

  postgres_service:
    build: 
      context: ./opol
      dockerfile: ./postgres_service/Dockerfile
    volumes:
      - ./opol/postgres_service/alembic/versions:/app/alembic/versions
    networks:
      - opol_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgres-service.rule=Host(`postgres.opol-api.open-politics.org`)"
      - "traefik.http.routers.postgres-service.entrypoints=websecure"
      - "traefik.http.routers.postgres-service.tls=true"
      - "traefik.http.routers.postgres-service.tls.certresolver=myresolver"
      - "traefik.http.middlewares.cors-postgres.headers.accesscontrolalloworiginlist=https://open-politics.org"
      - "traefik.http.middlewares.cors-postgres.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.cors-postgres.headers.accesscontrolallowheaders=Content-Type,Authorization"
      - "traefik.http.middlewares.cors-postgres.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.cors-postgres.headers.addvaryheader=true"
      - "traefik.http.routers.postgres-service.middlewares=cors-postgres@docker"
      - "traefik.http.services.postgres-service.loadbalancer.server.port=5434"
    depends_on:
      - articles_database

  articles_database:
    image: pgvector/pgvector:pg16
    restart: always
    environment:
      - POSTGRES_USER=${ARTICLES_DB_USER}
      - POSTGRES_PASSWORD=${ARTICLES_DB_PASSWORD}
      - POSTGRES_DB=${ARTICLES_DB_NAME}
    volumes:
      - ./data/articles_db_data:/var/lib/postgresql/data
    networks:
      - opol_network

  classification_service:
    build: 
      context: ./opol
      dockerfile: ./classification_service/Dockerfile
    networks:
      - opol_network
    environment:
      - LOCAL_LLM=${LOCAL_LLM}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api

  embedding_service:
    build: 
      context: ./opol
      dockerfile: ./embedding_service/Dockerfile
    restart: always
    networks:
      - opol_network
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
    depends_on:
      - redis
      - postgres_service
    
  pelias_placeholder:
    image: pelias/placeholder
    restart: always
    command: >
      sh -c '
        if [ ! -s /data/placeholder/store.sqlite3 ]; then
          echo "Placeholder data not found or empty. Downloading..."
          rm -f /data/placeholder/store.sqlite3
          mkdir -p /data/placeholder
          wget -O /data/placeholder/store.sqlite3.gz https://data.geocode.earth/placeholder/store.sqlite3.gz
          gunzip /data/placeholder/store.sqlite3.gz
        else
          echo "Placeholder data found."
        fi
        ls -l /data/placeholder
        ./cmd/server.sh
      '
    environment:
      - PORT=${PELIAS_PLACEHOLDER_PORT}
    ports:
      - "${PELIAS_PLACEHOLDER_PORT}:${PELIAS_PLACEHOLDER_PORT}"
    volumes:
      - ./data/placeholder:/data/placeholder

  entity_service:
    build: 
      context: ./opol
      dockerfile: ./entity_service/Dockerfile
    restart: always
    networks:
      - opol_network
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
    depends_on:
      - redis
      - postgres_service

  r2r:
    build: 
      context: ./opol
      dockerfile: ./r2r_server/Dockerfile
    networks:
      - opol_network
    environment:
      - HOST=0.0.0.0
      - PORT=8001
      - POSTGRES_USER=${R2R_DB_USER}
      - POSTGRES_PASSWORD=${R2R_DB_PASSWORD}
      - POSTGRES_HOST=r2r_database
      - POSTGRES_PORT=5432
      - POSTGRES_DBNAME=${R2R_DB_NAME}
      - POSTGRES_VECS_COLLECTION=${R2R_VECS_COLLECTION}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_TOKEN}
      - CONFIG_OPTION=local_llm
    depends_on:
      - r2r_database

  r2r_database:
    image: pgvector/pgvector:pg16
    restart: always
    environment:
      - POSTGRES_USER=${R2R_DB_USER}
      - POSTGRES_PASSWORD=${R2R_DB_PASSWORD}
      - POSTGRES_DB=${R2R_DB_NAME}
    volumes:
      - ./data/r2r_db_data:/var/lib/postgresql/data
    networks:
      - opol_network

  rag_service:
    build: 
      context: ./opol
      dockerfile: ./rag_service/Dockerfile
    restart: always
    networks:
      - opol_network
    volumes:
      - ./opol/rag_service/main.py:/app/main.py
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
      - POSTGRES_HOST=r2r_database
      - POSTGRES_USER=${R2R_DB_USER}
      - POSTGRES_PASSWORD=${R2R_DB_PASSWORD}
      - POSTGRES_DBNAME=${R2R_DB_NAME}
      - POSTGRES_PORT=5432
      - POSTGRES_VECS_COLLECTION=xvecs
      - INIT_DB=true
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - R2R_SERVER_URL=http://r2r:${R2R_PORT}
    depends_on:
      - redis
      - r2r_database

  redis:
    image: redis:latest
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./opol/core/configs/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - opol_network

  scraper_service:
    build: 
      context: ./opol
      dockerfile: ./scraper_service/Dockerfile
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_SERVER_PORT}/api
    networks:
      - opol_network
    depends_on:
      - redis

  prefect_server:
    image: prefecthq/prefect:2.16-python3.11-conda
    restart: always
    volumes:
      - prefect_data:/root/.prefect
    entrypoint: ["/opt/prefect/entrypoint.sh", "prefect", "server", "start"]
    environment:
      - PREFECT_UI_URL=http://0.0.0.0:${PREFECT_SERVER_PORT}
      - PREFECT_API_URL=http://0.0.0.0:${PREFECT_SERVER_PORT}/api
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://${PREFECT_DB_USER}:${PREFECT_DB_PASSWORD}@prefect_database:5432/${PREFECT_DB_NAME}
    networks:
      - opol_network
    depends_on:
      - prefect_database

  prefect_database:
    image: pgvector/pgvector:pg16
    restart: always
    environment:
      - POSTGRES_USER=${PREFECT_DB_USER}
      - POSTGRES_PASSWORD=${PREFECT_DB_PASSWORD}
      - POSTGRES_DB=${PREFECT_DB_NAME}
    volumes:
      - ./opol/app:/app
      - prefect_db_data:/var/lib/postgresql/data
    networks:
      - opol_network

networks:
  opol_network:
    external: true

volumes:
  articles_db_data:
  prefect_db_data:
  prefect_data:
  r2r_db_data: